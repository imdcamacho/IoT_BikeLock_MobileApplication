package com.example.iot_bikelock_mobileapplication.activities;

import android.content.Intent;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.widget.Toast;

import androidx.appcompat.app.AppCompatActivity;

import com.android.volley.Response;
import com.example.iot_bikelock_mobileapplication.R;
import com.example.iot_bikelock_mobileapplication.data.LoginBackendDataSource;
import com.example.iot_bikelock_mobileapplication.data.LoginRepository;
import com.example.iot_bikelock_mobileapplication.data.LoginSharedPreferenceDataSource;
import com.example.iot_bikelock_mobileapplication.databinding.ActivityLoginBinding;
import com.google.android.gms.auth.api.signin.GoogleSignIn;
import com.google.android.gms.auth.api.signin.GoogleSignInAccount;
import com.google.android.gms.auth.api.signin.GoogleSignInClient;
import com.google.android.gms.auth.api.signin.GoogleSignInOptions;
import com.google.android.gms.common.SignInButton;
import com.google.android.gms.common.api.ApiException;
import com.google.android.gms.tasks.Task;

import org.json.JSONException;
import org.json.JSONObject;

public class LoginActivity extends AppCompatActivity implements View.OnClickListener {
    // normally sensitive, but this client ID is easily revocable,
    // so it can stay hardcoded while repository remains private.
    private static final String BACKEND_GOOGLE_CLIENT_ID = "1056717573912-dqvv79sbj4vuqnmdicvq58f2lcqnlqul.apps.googleusercontent.com";

    private static final int RC_SIGN_IN = 255;
    private ActivityLoginBinding binding;
    private GoogleSignInClient mGoogleSignInClient;
    private LoginRepository repository;

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        // android view binding. generated by android studio.
        // https://developer.android.com/topic/libraries/view-binding
        binding = ActivityLoginBinding.inflate(getLayoutInflater());
        setContentView(binding.getRoot());

        findViewById(R.id.sign_in_button).setOnClickListener((View.OnClickListener) this);


        // Configure sign-in to request the user's ID, email address, and basic
        // profile. ID and basic profile are included in DEFAULT_SIGN_IN.

        // Build a GoogleSignInClient with the options specified by gso.
        GoogleSignInOptions gso = new GoogleSignInOptions.Builder(GoogleSignInOptions.DEFAULT_SIGN_IN)
                .requestEmail()
                .requestIdToken(BACKEND_GOOGLE_CLIENT_ID)
                .build();
        mGoogleSignInClient = GoogleSignIn.getClient(this, gso);

        // Set the dimensions of the sign-in button.
        SignInButton signInButton = findViewById(R.id.sign_in_button);
        signInButton.setSize(SignInButton.SIZE_STANDARD);

        // TODO remove: for easier development only.
        // allow for changing google accounts on app start.
        signOffGoogleAccount();

        this.repository = LoginRepository.getInstance(
                LoginBackendDataSource.getInstance(getApplicationContext()),
                LoginSharedPreferenceDataSource.getInstance(getApplicationContext())
        );

    }

    @Override
    protected void onStart() {
        super.onStart();
        // Check for existing Google Sign In account, if the user is already signed in
        // the GoogleSignInAccount will be non-null.

        GoogleSignInAccount account = GoogleSignIn.getLastSignedInAccount(this);
        if (account != null) {
            loginToBackend(account);
        }
//        updateUI(account);
    }

    @Override
    public void onClick(View v) {
        switch (v.getId()) {
            case R.id.sign_in_button:
                signIn();
                break;
            // ...
        }
    }


    private void signIn() {
        Intent signInIntent = mGoogleSignInClient.getSignInIntent();
        startActivityForResult(signInIntent, RC_SIGN_IN);
    }
    @Override
    public void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);

        // Result returned from launching the Intent from GoogleSignInClient.getSignInIntent(...);
        if (requestCode == RC_SIGN_IN) {
            // The Task returned from this call is always completed, no need to attach
            // a listener.
            Task<GoogleSignInAccount> task = GoogleSignIn.getSignedInAccountFromIntent(data);
            handleSignInResult(task);
        }
    }
    private void handleSignInResult(Task<GoogleSignInAccount> completedTask) {
        try {
            GoogleSignInAccount account = completedTask.getResult(ApiException.class);
            loginToBackend(account);
            // Signed in successfully, show authenticated UI.
//            updateUI(account);
        } catch (ApiException e) {
            // The ApiException status code indicates the detailed failure reason.
            // Please refer to the GoogleSignInStatusCodes class reference for more information.
            Log.w(null, "signInResult:failed code=" + e.getStatusCode());
//            updateUI(null);
        }
    }

    public void signOffGoogleAccount() {
        mGoogleSignInClient.revokeAccess();
    }

    private void loginToBackend(GoogleSignInAccount googleAccount) {
        String toastText = "Signed in as: " + googleAccount.getEmail();
        Toast.makeText(getApplicationContext(), toastText, Toast.LENGTH_SHORT).show();
        String accountToken = googleAccount.getIdToken();
        if (accountToken != null) {
            try {
                this.repository.login(
                        accountToken,
                        new Response.Listener<JSONObject>() {
                            @Override
                            public void onResponse(JSONObject response) {
                                /* shared prefs are done at repository method. */
                                // move to activity for authenticated.
                                String authStatus = null;
                                try {
                                    authStatus = response.getString("auth_status");
                                    gotoAuthActivity(authStatus);
                                } catch (JSONException e) {
                                    Toast.makeText(getApplicationContext(), "Error in parsing Authentication.", Toast.LENGTH_SHORT).show();
                                    e.printStackTrace();
                                }
                            }
                        },
                        null
                );
            } catch (JSONException e) {
                e.printStackTrace();
            }
        }
    }

    /**
     * direct UI to the appropriate activity based on authentication status.
     *
     * @param authStatus auth status returned by backend
     */
    private void gotoAuthActivity(String authStatus) {
        Intent intent = null;
        if (authStatus.equals("SUCCESS_INCOMPLETE_REGISTRATION")) {
            intent = new Intent(LoginActivity.this, CompleteRegistrationActivity.class);
        } else if (authStatus.equals("SUCCESS_UNVERIFIED")) {
            // TODO direct user to awaiting verification screen.
            intent = new Intent(LoginActivity.this, AwaitingVerificationActivity.class);
        } else if (authStatus.equals("SUCCESS")) {
            intent = new Intent(LoginActivity.this, MainActivity.class);
        } else {
            // error.
            Toast.makeText(getApplicationContext(), "Invalid authentication status", Toast.LENGTH_LONG).show();
            return;
        }
        startActivity(intent);
        finish();
    }


}